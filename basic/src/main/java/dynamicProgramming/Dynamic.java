package dynamicProgramming;

import java.util.Arrays;

public class Dynamic {

	public static void main(String[] args) {
		int[] n = new int[]{99, -9, -5, 51, 5, -46, -83, -71, -77, -100, -15, 89, -41, 98, -43, 61, -26, 86, 10, 32, -19, 77, -47, 61, 12, 10, 57, 56, -85, -19, 0, -100, 94, -31, 84, -68,
				-77, -85, 35, 59, 25, 20, 46, -63, -29, -5, -4, 83, 53, -51, 28, 42, -27, 27, 85, 82, 95, -1, 94, 83, 3, 29, 57, 62, 38, 53, 90, -77, 49, -52, 84, -69, 38, 91, -71, -23, 15, -80, 55, 40,
				-73, 74, 54, -12, -76, -61, -30, -99, -3, -11, -89, 99, 1, 67, -99, 28, -92, -85, -50, -59, 56, 18, -85, -98, 59, 38, -35, 50, 22, -54, 34, -8, -88, 21, -37, -38, 58, 79, 70, -72, 36,
				-53, 45, -65, -1, 88, 93, 87, 65, 1, 74, -50, 27, 86, -64, -5, 93, 37, 43, -91, 55, 17, 89, 14, -76, 30, -37, 88, -38, -28, -77, 56, 71, 55, -95, 81, 100, 68, -3, -88, -88, -30, 61, -1,
				0, -71, 94, -56, 65, 71, -83, 29, 48, 98, -95, 1, -73, 45, 15, 79, -61, -46, 97, -61, 63, -33, -40, -54, 88, -89, -39, -99, -16, -44, 39, 30, -80, 47, -5, -67, 2, -71, -13, -27, -62,
				-78, 21, 86, 31, -63, -70, -8, 74, -60, -21, 44, -14, -27, 98, -67, -35, -23, 14, 8, -17, 2, -46, -56, -89, 28, 56, -76, 32, 11, -9, -100, -77, -93, 41, -82, -41, 29, -70, 64, -66, 96,
				97, 83, -6, -28, 65, 59, 77, 51, 74, -56, -65, 25, 53, -51, -38, 86, 24, -95, -10, 45, -11, -80, 38, -45, -41, 17, -60, 76, 51, -81, 87, -100, -83, 10, -17, 13, 49, 99, 55, 17, 91, -82,
				-58, 47, 43, -66, -37, -7, 76, -4, -29, -94, 22, -64, 100, 12, 26, -55, -74, -66, 55, 16, 96, 65, -96, -16, 11, 27, 63, -12, 39, -100, -96, -49, 51, -73, -32, 9, -41, -19, 2, 60, -93,
				-94, 49, 66, 20, 73, 33, -26, 94, 20, 49, -19, -20, 77, -22, -32, 35, 91, -96, 56, -70, -65, 47, 53, -31, 0, 48, -48, -38, 68, 34, 59, -89, -54, 11, 62, -76, -5, -14, -7, 45, 95, 61,
				20, 50, -71, -100, -14, -27, 38, 52, 4, 59, -5, 96, 75, -96, 25, -96, -79, -47, 0, -91, -76, 71, -3, -73, 8, 5, 99, 15, 46, 11, -41, -40, 48, 98, 18, -63, -25, 41, -95, -10, -85, 62,
				-13, 72, -56, -86, 95, -89, 72, -75, -21, 37, 32, 90, -52, 91, -54, -13, -87, -48, 34, -14, 57, -13, -76, 64, 34, -71, 59, -93, 88, 65, 22, -44, -47, -9, 29, -42, -89, 8, -70, 67, -73,
				26, -72, 50, -99, -55, 57, -29, -66, -26, 93, -48, -4, 44, 2, 46, 6, 10, 9, 38, 7, -27, -89, -18, 76, -63, -84, -75, 12, 3, -95, 72, 12, 64, 72, 28, 71, 95, 95, 80, 12, -50, -72, 24, -58,
				-78, -96, 74, 40, -73, -5, 44, -79, 73, 73, 80, -76, 71, -59, -42, -50, -21, -2, 37, 56, -55, -27, 65, -27, -3, -96, -97, -44, -82, 53, -33, -38, -71, 39, -56, 69, 61, 100, -40, 39, 5, 56,
				23, -9, 6, 49, 3, 40, 60, -27, -37, 60, 31, -63, 29, 52, 69, 9, -63, 66, 60, 19, 48, 20, -97, 36, 75, 29, -75, -29, 78, 61, 81, 65, -65, -42, -96, -36, -25, 57, -92, -44, -95, 26, -67, -55, 64,
				-71, 38, -48, 87, 78, 36, 27, -90, -39, 91, -78, 29, -52, 78, 36, -88, -96, 58, 40, 59, -90, 98, -96, 55, 46, 86, -81, 36, -25, -19, -72, 30, 71, 35, 98, -92, 53, -16, 61, 39, 15, 95, -40, 0, 22,
				-59, -4, 33, 55, -89, -25, -59, -9, -61, -67, 93, -2, 14, -58, -28, 91, 81, 4, -71, 73, -48, 35, -6, 6, -73, -54, -55, -46, 19, 80, -25, 29, 24, -53, 76, -35, 98, 78, -100, 66, -19, 99, -81, 39,
				-14, -3, -50, -32, -58, 19, -68, 9, -66, 39, 96, -83, -92, 55, 28, -63, 39, 65, -93, 53, 40, 95, -85, 77, -62, -22, -32, -70, 28, -96, 31, 7, -51, -63, 52, -61, 2, 54, -54, -88, -79, 86, 65,
				85, 44, 73, -77, 5, 93, -38, -93, -37, -45, 74, -38, -29, 53, -76, -80, 8, 80, -22, -32, 84, 78, -11, 74, 78, -76, 100, 55, -54, -33, 47, -25, -64, 27, -68, 54, 22, 78, 82, 30, -22, 28, -59,
				64, 20, -7, -36, 20, -22, -34, 72, 22, -93, -32, -57, -54, -41, 83, 56, 76, 24, -76, 42, -89, 60, 92, -71, -19, 80, -5, -12, -7, 79, 12, 74, -60, -69, 59, 92, 29, 45, 16, -31, -67, 79, -44,
				36, -50, -10, 91, 43, -58, 38, 83, -14, -12, 92, -4, -39, -35, 36, 27, 44, -5, -68, 91, 11, -74, 0, -93, 81, 100, -65, 77, 16, -56, 28, -98, -47, 73, 61, 89, -6, -11, 12, 57, 1, 13, -66, -87,
				-58, -1, -32, -39, -84, 43, -37, -12, -30, 11, -38, 57, 28, -11, 73, 15, -87, -90, 80, -57, -71, -95, 3, 29, 94, 72, -40, 15, -57, -38, -21, -81, 80, 32, 73, -16, -60, -21, -93, -25, -34, 6,
				25, -26, 31, 71, 28, -48, -50, 69, 78, 83, -79, -25, 25, -15, 95, -60, 70, -91, -44, 7, 96, -65, 81, -48, 84, -10, -62, 92, -33, -93, 81, -13, 19, 71, -41, 80, 68, 78, 41, 43, 75, -61, -78,
				-72, -11, -17, 77, 65, -90, 51, 41, 58, -57, 56, -42, -63, -48, 50, -34, -62, -23, -80, 90, -77, -82, -95, 4, -54, -100, -2, 66, 40, 61, -78, -16, 91, -99, -14, 37, -47, -57, -49, 20, -37,
				68, 47, 66, 87, 54, 62, 28, -50, -21, -88, 18, 45, -70, -30, 72, 67, 87, -62, -8, 19, 72, 84, 7, 0, -76, -84, 70};

		int[] dp = new int[n.length];

		dp[0] = n[0];

		for (int i = 1; i < n.length; i++) {
			dp[i] = Math.max(dp[i - 1] + n[i], n[i]);
		}

		System.out.println(Arrays.stream(dp).max().orElse(0));
	}
}