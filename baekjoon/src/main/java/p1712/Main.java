package p1712;

import java.util.Scanner;

/**
 * 백준 1712번 - 손익분기점
 * https://www.acmicpc.net/problem/1712
 * 
 * 난이도: Bronze IV
 * 분류: 수학, 사칙연산
 * 
 * 프로그래밍 기초 개념:
 * 1. 수학적 사고와 공식 도출
 * 2. 조건문을 이용한 예외 처리
 * 3. long 자료형 사용 (큰 수 처리)
 * 4. 일차방정식과 부등식 해결
 * 
 * 수학 개념:
 * - 손익분기점: 수익 = 비용이 되는 지점
 * - 고정비용 A, 가변비용 B, 판매가격 C
 * - 수익 = C×n, 비용 = A + B×n
 * - 손익분기점: C×n > A + B×n
 * 
 * 초보자를 위한 팁:
 * - 손익분기점은 경제학에서 중요한 개념입니다
 * - 가변비용이 판매가격보다 크거나 같으면 절대 이익을 낼 수 없습니다
 * - 수학적 공식을 프로그래밍으로 구현하는 연습입니다
 */
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // 입력: 고정비용 A, 가변비용 B, 판매가격 C
        long A = sc.nextLong(); // 고정비용 (처음에 한 번만 드는 비용)
        long B = sc.nextLong(); // 가변비용 (제품 하나당 드는 비용)  
        long C = sc.nextLong(); // 판매가격 (제품 하나당 받는 가격)
        
        // 손익분기점이 존재하지 않는 경우
        // 가변비용 ≥ 판매가격이면 팔수록 손해
        if (B >= C) {
            System.out.println(-1);
            sc.close();
            return;
        }
        
        // 손익분기점 계산
        // 이익 = 수익 - 비용 > 0
        // C×n - (A + B×n) > 0
        // C×n - A - B×n > 0  
        // (C-B)×n > A
        // n > A / (C-B)
        // 따라서 최소 판매 개수는 A / (C-B) + 1
        
        long breakEvenPoint = A / (C - B) + 1;
        System.out.println(breakEvenPoint);
        
        sc.close();
    }
}

/*
 * 학습 가이드:
 * 
 * 1. 손익분기점 개념 이해
 *    - 수익(Revenue) = 판매가격 × 판매량 = C × n
 *    - 비용(Cost) = 고정비용 + 가변비용 × 판매량 = A + B × n
 *    - 이익(Profit) = 수익 - 비용 = C×n - (A + B×n) = (C-B)×n - A
 *    - 손익분기점: 이익 > 0이 되는 최소 판매량
 * 
 * 2. 수학적 공식 도출
 *    이익 > 0 조건:
 *    (C-B)×n - A > 0
 *    (C-B)×n > A
 *    n > A / (C-B)
 *    
 *    따라서 최소 정수 n = ⌊A / (C-B)⌋ + 1
 * 
 * 3. 예외 상황 처리
 *    - B ≥ C: 가변비용이 판매가격보다 크거나 같음
 *    - 이 경우 (C-B) ≤ 0이므로 팔수록 손해
 *    - 손익분기점이 존재하지 않음 → -1 출력
 * 
 * 4. 자료형 선택
 *    - int: -2,147,483,648 ~ 2,147,483,647
 *    - long: -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
 *    - 문제에서 A, B, C가 클 수 있으므로 long 사용
 * 
 * 5. 실습 예시
 *    예시 1: A=1000, B=70, C=170
 *    - 제품 하나당 순이익: 170-70 = 100원
 *    - 손익분기점: 1000/100 + 1 = 11개
 *    - 검증: 11개 판매시 수익 1870원, 비용 1770원 → 이익 100원
 *    
 *    예시 2: A=1000, B=100, C=70  
 *    - 제품 하나당 순손실: 70-100 = -30원
 *    - 팔수록 손해 → -1
 * 
 * 6. 경제학적 의미
 *    - 고정비용: 임대료, 기계값 등 판매량과 무관한 비용
 *    - 가변비용: 재료비, 인건비 등 판매량에 비례하는 비용
 *    - 기업이 최소한 몇 개를 팔아야 손해를 보지 않는지 계산
 * 
 * 7. 프로그래밍 관점
 *    - 수학 공식을 코드로 변환하는 연습
 *    - 예외 상황을 먼저 처리하는 패턴
 *    - 나눗셈에서 올림 처리 (⌊A/(C-B)⌋ + 1)
 * 
 * 8. 주의사항
 *    - C-B = 0인 경우도 B ≥ C 조건에 포함됨
 *    - 정수 나눗셈에서 소수점은 버려짐 (floor 연산)
 *    - +1을 하는 이유: 손익분기점보다 1개 더 팔아야 이익
 * 
 * 9. 확장 학습
 *    - 다차 비용 함수 (이차, 삼차 함수)
 *    - 여러 제품의 손익분기점 분석
 *    - 시간에 따른 비용 변화 고려
 */
