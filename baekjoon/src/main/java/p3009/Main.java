package p3009;

/*
 * 백준 3009번: 네 번째 점
 * https://www.acmicpc.net/problem/3009
 * 
 * [문제 분류] 기하학 (Geometry) / 수학 (Mathematics)
 * [난이도] Bronze 3
 * 
 * [문제 요약]
 * 세 점이 주어졌을 때, 축에 평행한 직사각형을 만들기 위해 필요한 네 번째 점을 찾는 프로그램을 작성하시오.
 * 
 * [제약 조건]
 * - 모든 좌표는 1 이상 1000 이하의 정수
 * - 입력되는 세 점은 직사각형의 세 꼭짓점
 * - 직사각형의 변은 좌표축에 평행
 * 
 * [알고리즘 설명]
 * 1. 축에 평행한 직사각형의 성질 이용
 * 2. 직사각형에서는 대각선상의 두 점을 제외하고, 
 *    x좌표 또는 y좌표가 같은 점들이 쌍을 이룸
 * 3. 세 점이 주어지면, 각 좌표값 중 한 번만 나타나는 값이 네 번째 점의 좌표
 * 
 * [구현 방법]
 * - x좌표: 세 점 중 두 점의 x좌표가 같다면, 나머지 한 점의 x좌표가 네 번째 점의 x좌표
 * - y좌표: 동일한 방식으로 y좌표 결정
 * - 조건문으로 같은 좌표를 가진 쌍을 찾고, 다른 점의 좌표를 선택
 * 
 * [수학적 원리]
 * 직사각형의 네 꼭짓점: (a,c), (a,d), (b,c), (b,d)
 * - 두 개의 서로 다른 x좌표 값: a, b (각각 2번씩 등장)
 * - 두 개의 서로 다른 y좌표 값: c, d (각각 2번씩 등장)
 * - 세 점이 주어지면, 각 좌표에서 1번만 등장하는 값이 네 번째 점의 해당 좌표
 * 
 * [예시]
 * 입력: (1,1), (1,2), (2,1)
 * x좌표 분석: 1이 2번, 2가 1번 → 네 번째 점의 x좌표는 2
 * y좌표 분석: 1이 2번, 2가 1번 → 네 번째 점의 y좌표는 2
 * 결과: (2,2)
 * 
 * [다른 구현 방법]
 * 1. XOR 연산 이용:
 *    x4 = x1 ^ x2 ^ x3; y4 = y1 ^ y2 ^ y3;
 *    (같은 값끼리 XOR하면 0이 되는 성질 이용)
 * 
 * 2. 빈도 계산:
 *    Map으로 각 좌표값의 등장 횟수를 세고, 1번 등장하는 값 선택
 * 
 * [현재 구현의 특징]
 * 장점: 직관적이고 이해하기 쉬움
 * 단점: 조건문이 많아 코드가 길어짐
 * 
 * [시간복잡도] O(1) - 상수 시간
 * [공간복잡도] O(1) - 고정된 변수만 사용
 */

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int x1 = sc.nextInt();
		int y1 = sc.nextInt();
		int x2 = sc.nextInt();
		int y2 = sc.nextInt();
		int x3 = sc.nextInt();
		int y3 = sc.nextInt();

		int x4 = 0;
		int y4 = 0;

		// x좌표 결정: 두 점의 x좌표가 같다면, 나머지 점의 x좌표가 네 번째 점의 x좌표
		if (x1 == x2) x4 = x3;      // 점1과 점2의 x좌표가 같으면, 점3의 x좌표 선택
		if (x2 == x3) x4 = x1;      // 점2와 점3의 x좌표가 같으면, 점1의 x좌표 선택
		if (x1 == x3) x4 = x2;      // 점1과 점3의 x좌표가 같으면, 점2의 x좌표 선택

		// y좌표 결정: 동일한 방식으로 y좌표 결정
		if (y1 == y2) y4 = y3;      // 점1과 점2의 y좌표가 같으면, 점3의 y좌표 선택
		if (y2 == y3) y4 = y1;      // 점2와 점3의 y좌표가 같으면, 점1의 y좌표 선택
		if (y1 == y3) y4 = y2;      // 점1과 점3의 y좌표가 같으면, 점2의 y좌표 선택

		System.out.println(x4 + " " + y4);
	}
}